<?xml version="1.0"?>
<project name="SampleLWJGLProject" default="jar"
	 xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Project-specific configuration -->
  <property name="artifactId" value="sample-java-project"/>
  <property name="version" value="1.0-SNAPSHOT"/>
  <property name="package.main" value="sample.java.project"/>
  <property name="main.class" value="${package.main}.${ant.project.name}"/>
  <property name="jar.file" value="${ant.project.name}.jar"/>

  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.classes.dir" value="${build.dir}/test"/>
  <property name="dist.dir" value="dist"/>
  <property name="lib.dir" value="lib"/>
  <property name="cache.dir" value=".cache"/>

  <!-- LWJGL info -->
  <property name="lwjgl.version" value="2.8.1"/>
  <property name="lwjgl.url" value="http://downloads.sourceforge.net/project/java-game-lib/Official%20Releases/LWJGL%20${lwjgl.version}/lwjgl-${lwjgl.version}.zip"/>

  <!-- Project classpath -->
  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Targets -->

  <target name="init">
    <available file="${lib.dir}" property="lib.present"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="resolve" unless="lib.present"
	  description="Retrieve dependencies with ivy.">
    <ivy:retrieve type="jar,bundle"/>
    <!-- Fetch LWJGL, because Ivy cannot. -->
    <mkdir dir="${cache.dir}"/>
    <get src="${lwjgl.url}" dest="${cache.dir}"
	 verbose="true" skipexisting="true"/>
    <unzip src="${cache.dir}/lwjgl-${lwjgl.version}.zip"
	   dest="${build.classes.dir}">
      <patternset>
	<include name="*/native/**/*"/>
      </patternset>
      <cutdirsmapper dirs="1"/>
    </unzip>
    <unzip src="${cache.dir}/lwjgl-${lwjgl.version}.zip"
	   dest="${lib.dir}">
      <patternset>
	<include name="*/jar/*.jar"/>
      </patternset>
      <cutdirsmapper dirs="2"/>
    </unzip>
  </target>

  <target name="compile" depends="init,resolve"
	  description="Compile all source files.">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="jar" depends="compile"
	  description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${jar.file}" basedir="${build.classes.dir}">
      <zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="compile"
	  description="Run the application in hotswap mode.">
    <java classname="${main.class}" classpath="${build.classes.dir}"
	  fork="true">
      <classpath refid="build.classpath"/>
      <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n"/>
    </java>
  </target>

  <target name="hotswap" depends="compile">
    <taskdef name="hotswap" classname="dak.ant.taskdefs.Hotswap"/>
    <hotswap verbose="true" port="9000">
      <fileset dir="${build.classes.dir}" includes="**/*.class">
	<modified/>
      </fileset>
    </hotswap>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${lib.dir}"/>
  </target>

  <target name="javadoc" description="Generate Javadoc HTML.">
    <javadoc destdir="${dist.dir}/javadoc">
      <fileset dir="${src.dir}" includes="**/*.java" />
    </javadoc>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check">
    <taskdef resource="checkstyletask.properties"/>
    <checkstyle config="checkstyle.xml">
      <fileset dir="src" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="optimize" depends="jar">
    <taskdef resource="proguard/ant/task.properties"/>
    <proguard>
      <libraryjar path="${java.home}/lib/rt.jar"/>
      <injar file="${dist.dir}/${jar.file}"/>
      <outjar file="${dist.dir}/out.${jar.file}"/>
      <keepclasseswithmembers access="public" type="class">
	<method access="public" type="void" name="main"
		parameters="java.lang.String[]"/>
      </keepclasseswithmembers>
    </proguard>
    <delete file="${dist.dir}/${jar.file}"/>
    <move file="${dist.dir}/out.${jar.file}" tofile="${dist.dir}/${jar.file}"/>
  </target>

  <!-- Unit testing (JUnit) -->

  <target name="test-compile" depends="compile"
	  description="Compile all of the unit tests.">
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.dir}" destdir="${test.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   classpath="${build.classes.dir}" includeantruntime="yes">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${test.classes.dir}">
      <fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="test" depends="test-compile"
	  description="Run all of the unit tests.">
    <junit>
      <classpath>
	<pathelement path="${build.classes.dir}"/>
	<pathelement path="${test.classes.dir}"/>
	<path refid="build.classpath"/>
      </classpath>
      <batchtest>
	<formatter type="brief" usefile="false"/>
	<fileset dir="${test.classes.dir}"/>
      </batchtest>
    </junit>
  </target>

  <!-- Maven repository support -->

  <target name="bundle" depends="jar,javadoc"
	  description="Stage a Maven repository bundle.">
    <!-- Pack up the artifacts -->
    <copy file="pom.xml"
	  tofile="${dist.dir}/bundle/${artifactId}-${version}.pom"/>
    <copy file="${dist.dir}/${jar.file}"
	  tofile="${dist.dir}/bundle/${artifactId}-${version}.jar"/>
    <jar jarfile="${dist.dir}/bundle/${artifactId}-${version}-javadoc.jar">
      <fileset dir="${dist.dir}/javadoc"/>
    </jar>
    <jar jarfile="${dist.dir}/bundle/${artifactId}-${version}-sources.jar">
      <fileset dir="${src.dir}"/>
    </jar>
    <!-- Sign all the things. You'll need gpg-agent help here. -->
    <apply executable="gpg">
      <arg value="--detach-sign"/>
      <arg value="--armor"/>
      <fileset dir="${dist.dir}/bundle"/>
    </apply>
    <!-- Pack it all up -->
    <jar destfile="${dist.dir}/bundle.jar" basedir="${dist.dir}/bundle"/>
  </target>
</project>
